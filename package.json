{
  "name": "aws-promjs",
  "version": "0.1.2",
  "description": "Decorates AWS SDK to use promises while maintaining exact same API as read in aws docs. Config available to exclude/add service methods.",
  "main": "aws-promjs.js",
  "scripts": {
    "test": "echo \"Warning: No tests created, I welcome any contributions of test code!\" && exit 1"
  },
  "keywords": [
    "aws",
    "aws-sdk",
    "promises",
    "aws promise",
    "bluebird"
  ],
  "author": {
    "name": "Michael Rosata"
  },
  "license": "MIT",
  "dependencies": {
    "aws-sdk": "^2.2.6",
    "bluebird": "^2.10.2"
  },
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mrosata/aws-promjs.git"
  },
  "bugs": {
    "url": "https://github.com/mrosata/aws-promjs/issues"
  },
  "homepage": "https://github.com/mrosata/aws-promjs#readme",
  "readme": "## AWS-PromJS ##\nAWS SDK wrapper which converts the standard AWS API Service methods into functions which will return a promise rather than take a callback. The Service objects are decorated based off a list of names in and can be easily extended or overwritten. So, what is the difference between AWS-PromJS and other modules that that wrap AWS Service methods to return a promise? Not much except for:\n> - The names are the same! The AWS methods names your used to, no changes!\n> - Explicit control through config of which methods return a promise and which don't.\n> - Your setup and AWS configuration doesn't change. It should be identical to your old code. Only service object methods return promises.\n> - If AWS-PromJS doesn't support the Service object your using, just add the service object namespace into  `inc/aws-promjs.json` with an Array containing every method name, or create your own config file in project root `/aws-promjs.json`.\n> - If you don't want a promise returned from a specific method, add that method name to an Array under `exclude &lt;service-name&gt; in a config file.\n\n```js\n// Require 'aws-promjs' instead of 'aws-sdk'.\nvar AWS = require('aws-promjs');\n\n// Configuration code should work exactly as AWS.\nAWS.config.loadFromPath('./path/to/AWS/config.json');\nAWS.config.region = 'us-east-1';\n\n// Service creation is the same as AWS.\nvar s3 = new AWS.S3();\n\n// Service method names the same as AWS!\ns3.createBucket({Bucket: 'Quite spiffy ole chap'})\n  // except that they return a promise rather than use callbacks\n  .then(function(data) {\n    console.log('promise resolved', data)\n  })\n  .catch(function(err) {\n    console.log('promise failed', err);\n  });\n```\n\nThis is a list of all the services returning promises out of the box and their version numbers. Most of these are untested at the moment and I could use some help finding any issues. If there is a service not listed here, it will still work the same as it did without `aws-promjs`. If you want to add a service that is not listed here, just follow the same convention used in the `./inc/aws-promjs.json` file, but do so in your own `aws-promjs.json` file within your projects root directory so it doesn't get overwritten on update.\n\n\n> - `AutoScaling`    version:  `[2011-01-01]`.\n> - `CloudFormation`    version:  `[2010-05-15]`.\n> - `CloudFront`    version:  `[2014-10-21]`.\n> - `CouldSearch`    version:  `[2013-01-01]`.\n> - `CloudSearchDomain`    version:  `[2013-01-01]`.\n> - `CloudWatch`    version:  `[2010-08-01]`.\n> - `CloudWatchLogs`    version:  `[2014-03-28]`.\n> - `CognitoIdentity`    version:  `[2014-06-30]`.\n> - `CognitoSync`    version:  `[2014-06-30]`.\n> - `DynamoDB`    version:  `[2012-08-10]`.\n> - `EC2`    version:  `[2014-10-01]`.\n> - `ECS`    version:  `[2014-11-13]`.\n> - `EMR`    version:  `[2009-03-31]`.\n> - `ElasticTranscoder`    version:  `[2012-09-25]`.\n> - `ElastiCache`    version:  `[2014-09-30]`.\n> - `Glacier`    version:  `[2012-06-01]`.\n> - `Kinesis`    version:  `[2013-12-02]`.\n> - `Redshift`    version:  `[2012-12-01]`.\n> - `RDS`    version:  `[2014-09-01]`.\n> - `Route53`    version:  `[2013-04-01]`.\n> - `Route53Domains`    version:  `[2014-05-15]`.\n> - `SES`    version:  `[2010-12-01]`.\n> - `SNS`    version:  `[2010-03-31]`.\n> - `SQS`    version:  `[2012-11-05]`.\n> - `S3`    version:  `[2006-03-01]`\n\n\n---\n#### Footnotes\n\n\n> **Note:**\n\n> - The config json files are **not asyncronous** because if they were then we wouldn't be able to return the AWS object using the same API as AWS-SDK. This may change in the future, rather than immediately return the AWS main object from `require('aws-promjs')` it may be better to return a promise there as well. I want to see how the promises in the service namespaces work out first.\n\n#### <i class=\"icon-refresh\"></i> Feel free to contribute lists of method names\n\nSince you should only need a list of the method names in an AWS Service object to convert it. If you compile a list of all the method names in an object feel free to send it over to [mrosata1984@gmail.com] and I will try to add it.\n\n\n[mrosata1984@gmail.com]:mailto:mrosata1984@gmail.com",
  "readmeFilename": "README.md",
  "gitHead": "c76935d1c1a3c9ddc8b95575980c1395fde60ecb",
  "_id": "aws-promjs@0.1.2",
  "_shasum": "6ea4fefe681e7a895d56ade0d8a395cad287b9dc",
  "_from": "aws-promjs@*"
}
