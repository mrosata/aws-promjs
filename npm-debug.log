0 info it worked if it ends with ok
1 verbose cli [ '/home/michaael/.nvm/versions/node/v0.12.7/bin/node',
1 verbose cli   '/home/michaael/.nvm/versions/node/v0.12.7/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@2.11.3
3 info using node@v0.12.7
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/michaael/projects/aws-mike/aws-promjs',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/michaael/.npm/aws-promjs/0.1.1/package.tgz not in flight; packing
9 verbose tar pack [ '/home/michaael/.npm/aws-promjs/0.1.1/package.tgz',
9 verbose tar pack   '/home/michaael/projects/aws-mike/aws-promjs' ]
10 verbose tarball /home/michaael/.npm/aws-promjs/0.1.1/package.tgz
11 verbose folder /home/michaael/projects/aws-mike/aws-promjs
12 info prepublish aws-promjs@0.1.1
13 verbose addLocalTarball adding from inside cache /home/michaael/.npm/aws-promjs/0.1.1/package.tgz
14 silly cache afterAdd aws-promjs@0.1.1
15 verbose afterAdd /home/michaael/.npm/aws-promjs/0.1.1/package/package.json not in flight; writing
16 verbose afterAdd /home/michaael/.npm/aws-promjs/0.1.1/package/package.json written
17 silly publish { name: 'aws-promjs',
17 silly publish   version: '0.1.1',
17 silly publish   description: 'Decorates AWS SDK to use promises while maintaining exact same API as read in aws docs. Config available to exclude/add service methods.',
17 silly publish   main: 'aws-promjs.js',
17 silly publish   scripts: { test: 'echo "Warning: No tests created, I welcome any contributions of test code!" && exit 1' },
17 silly publish   keywords: [ 'aws', 'aws-sdk', 'promises', 'aws promise', 'bluebird' ],
17 silly publish   author: { name: 'Michael Rosata' },
17 silly publish   license: 'MIT',
17 silly publish   dependencies: { 'aws-sdk': '^2.2.6', bluebird: '^2.10.2' },
17 silly publish   devDependencies: {},
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/mrosata/aws-promjs.git' },
17 silly publish   bugs: { url: 'https://github.com/mrosata/aws-promjs/issues' },
17 silly publish   homepage: 'https://github.com/mrosata/aws-promjs#readme',
17 silly publish   readme: '## AWS-PromJS ##\nAWS SDK wrapper which converts the standard AWS API Service methods into functions which will return a promise rather than take a callback. The Service objects are decorated based off a list of names in and can be easily extended or overwritten. So, what is the difference between AWS-PromJS and other modules that that wrap AWS Service methods to return a promise? Not much except for:\n> - The names are the same! The AWS methods names your used to, no changes!\n> - Explicit control through config of which methods return a promise and which don\'t.\n> - Your setup and AWS configuration doesn\'t change. It should be identical to your old code. Only service object methods return promises.\n> - If AWS-PromJS doesn\'t support the Service object your using, just add the service object namespace into  `inc/aws-promjs.json` with an Array containing every method name, or create your own config file in project root `/aws-promjs.json`.\n> - If you don\'t want a promise returned from a specific method, add that method name to an Array under `exclude &lt;service-name&gt; in a config file.\n\n```js\n// Require \'aws-promjs\' instead of \'aws-sdk\'.\nvar AWS = require(\'aws-promjs\');\n\n// Configuration code should work exactly as AWS.\nAWS.config.loadFromPath(\'./path/to/AWS/config.json\');\nAWS.config.region = \'us-east-1\';\n\n// Service creation is the same as AWS.\nvar s3 = new AWS.S3();\n\n// Service method names the same as AWS!\ns3.createBucket({Bucket: \'Quite spiffy ole chap\'})\n  // except that they return a promise rather than use callbacks\n  .then(function(data) {\n    console.log(\'promise resolved\', data)\n  })\n  .catch(function(err) {\n    console.log(\'promise failed\', err);\n  });\n```\n\nThis is a list of all the services returning promises out of the box and their version numbers. Most of these are untested at the moment and I could use some help finding any issues. If there is a service not listed here, it will still work the same as it did without `aws-promjs`. If you want to add a service that is not listed here, just follow the same convention used in the `./inc/aws-promjs.json` file, but do so in your own `aws-promjs.json` file within your projects root directory so it doesn\'t get overwritten on update.\n\n\n> - `AutoScaling`    version:  `[2011-01-01]`.\n> - `CloudFormation`    version:  `[2010-05-15]`.\n> - `CloudFront`    version:  `[2014-10-21]`.\n> - `CouldSearch`    version:  `[2013-01-01]`.\n> - `CloudSearchDomain`    version:  `[2013-01-01]`.\n> - `CloudWatch`    version:  `[2010-08-01]`.\n> - `CloudWatchLogs`    version:  `[2014-03-28]`.\n> - `CognitoIdentity`    version:  `[2014-06-30]`.\n> - `CognitoSync`    version:  `[2014-06-30]`.\n> - `DynamoDB`    version:  `[2012-08-10]`.\n> - `EC2`    version:  `[2014-10-01]`.\n> - `ECS`    version:  `[2014-11-13]`.\n> - `EMR`    version:  `[2009-03-31]`.\n> - `ElasticTranscoder`    version:  `[2012-09-25]`.\n> - `ElastiCache`    version:  `[2014-09-30]`.\n> - `Glacier`    version:  `[2012-06-01]`.\n> - `Kinesis`    version:  `[2013-12-02]`.\n> - `Redshift`    version:  `[2012-12-01]`.\n> - `RDS`    version:  `[2014-09-01]`.\n> - `Route53`    version:  `[2013-04-01]`.\n> - `Route53Domains`    version:  `[2014-05-15]`.\n> - `SES`    version:  `[2010-12-01]`.\n> - `SNS`    version:  `[2010-03-31]`.\n> - `SQS`    version:  `[2012-11-05]`.\n> - `S3`    version:  `[2006-03-01]`\n\n\n---\n#### Footnotes\n\n\n> **Note:**\n\n> - The config json files are **not asyncronous** because if they were then we wouldn\'t be able to return the AWS object using the same API as AWS-SDK. This may change in the future, rather than immediately return the AWS main object from `require(\'aws-promjs\')` it may be better to return a promise there as well. I want to see how the promises in the service namespaces work out first.\n\n#### <i class="icon-refresh"></i> Feel free to contribute lists of method names\n\nSince you should only need a list of the method names in an AWS Service object to convert it. If you compile a list of all the method names in an object feel free to send it over to [mrosata1984@gmail.com] and I will try to add it.\n\n\n[mrosata1984@gmail.com]:mailto:mrosata1984@gmail.com',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: 'cdb1e8821f3595d643a28c6c66df40b589776f4e',
17 silly publish   _id: 'aws-promjs@0.1.1',
17 silly publish   _shasum: 'a36dbfcb0146db06efe6bbc5641c819e348f8903',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name aws-promjs
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/aws-promjs
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /home/michaael/.npm/aws-promjs/0.1.1/package.tgz
25 verbose request uri https://registry.npmjs.org/aws-promjs
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 3:50:20 PM
28 verbose request using bearer token for auth
29 verbose request id 3640d20fb84ed99b
30 http request PUT https://registry.npmjs.org/aws-promjs
31 http 403 https://registry.npmjs.org/aws-promjs
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=60',
32 verbose headers   'content-length': '95',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Mon, 05 Oct 2015 19:50:21 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-atl6223-ATL',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1444074620.264073,VS0,VE1129' }
33 verbose request invalidating /home/michaael/.npm/registry.npmjs.org/aws-promjs on PUT
34 error publish Failed PUT 403
35 verbose stack Error: "You cannot publish over the previously published version 0.1.1." : aws-promjs
35 verbose stack     at CachingRegistryClient.<anonymous> (/home/michaael/.nvm/versions/node/v0.12.7/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:247:14)
35 verbose stack     at Request._callback (/home/michaael/.nvm/versions/node/v0.12.7/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:170:14)
35 verbose stack     at Request.self.callback (/home/michaael/.nvm/versions/node/v0.12.7/lib/node_modules/npm/node_modules/request/request.js:354:22)
35 verbose stack     at Request.emit (events.js:110:17)
35 verbose stack     at Request.<anonymous> (/home/michaael/.nvm/versions/node/v0.12.7/lib/node_modules/npm/node_modules/request/request.js:1207:14)
35 verbose stack     at Request.emit (events.js:129:20)
35 verbose stack     at IncomingMessage.<anonymous> (/home/michaael/.nvm/versions/node/v0.12.7/lib/node_modules/npm/node_modules/request/request.js:1153:12)
35 verbose stack     at IncomingMessage.emit (events.js:129:20)
35 verbose stack     at _stream_readable.js:908:16
35 verbose stack     at process._tickCallback (node.js:355:11)
36 verbose statusCode 403
37 verbose pkgid aws-promjs
38 verbose cwd /home/michaael/projects/aws-mike/aws-promjs
39 error Linux 3.16.0-50-generic
40 error argv "/home/michaael/.nvm/versions/node/v0.12.7/bin/node" "/home/michaael/.nvm/versions/node/v0.12.7/bin/npm" "publish"
41 error node v0.12.7
42 error npm  v2.11.3
43 error code E403
44 error "You cannot publish over the previously published version 0.1.1." : aws-promjs
45 error If you need help, you may report this error at:
45 error     <https://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
